#version 130


in vec4 v;
in vec2 selfCoord;

out uvec4 fragColor;
// in uint volume;

uniform usampler2D lastTick;
uniform float time;


const int maxCapacity = 8;


int getSliceShift(int volume, int slice, int capacity) {
    // random is a value in the range 0..1 (excluding 1)
    // it is generated by taking the fractional bits of a
    // high amplitude, high frequency sin wave based on the input and time
    float random = fract(43758.5453 * sin(
        time * dot(vec2(volume, slice), vec2(22.9898, 78.233))
    ));
    return int(floor(capacity * random));
}

// self and target:
//     capacity
//     slices

// can be infered:
//     sliceNum
//     sliceElement

// // if v is in the range -1..1
// // move it to 0..1
// vec4 to01(vec4 v) {
//     return (v + vec4(1.0)) * 0.5;
// }

void main() {
    uvec4 prev = texelFetch(lastTick, ivec2(selfCoord), 0);
    // prev = uvec4(
    //     uint(selfCoord.x) * 16u,
    //     uint(selfCoord.y),
    //     0, //uint(v.x * 255.0),
    //     255
    // );

    // fragColor = vec4(prev) / 255;
    fragColor = prev;
    // fragColor = vec4(0.0, 1.0, 0.0, 1.0);
    // fragColor = uvec4(0, 255, 255, 255);


    // vec4 prev = texture2D(lastTick, to01(v).xy);
    // vec4 prev =
    // fragColor = prev + vec4(1.0 / 255.0);  //vec4(v.xyz, 1.0);
    // fragColor.a = 1.0;

    // fragColor = vec4(to01(v).xyz, 1.0);
    // fragColor = uvec4(
    //     255,
    //     128,
    //     0,
    //     1
    // );
}
